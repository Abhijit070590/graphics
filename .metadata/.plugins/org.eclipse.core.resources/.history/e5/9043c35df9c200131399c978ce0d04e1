#include "../Headers/Mesh.h"
#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <GL/glut.h>
using namespace std;



void Mesh::triangulate()
{
	cout << "Inside triangulation";
	vector<Polygon*> newPoly;
	if(_polySize == 4)
	{
		for(int i=0;i<_numPoly;i++)
		{
			Polygon *p1 = new Polygon;
			Polygon *p2 = new Polygon;

			p1->vert[0] = _polygons[i]->vert[0];
			p1->vert[1] = _polygons[i]->vert[1];
			p1->vert[2] = _polygons[i]->vert[2];

			p2->vert[0] = _polygons[i]->vert[2];
			p2->vert[1] = _polygons[i]->vert[3];
			p2->vert[2] = _polygons[i]->vert[0];

			newPoly.push_back(p1);
			newPoly.push_back(p2);
		}
		_polygons.clear();
		_polygons = newPoly;
	}
	if(_polySize == 5)
	{
		for(int i=0;i<_numPoly;i++)
		{
			Polygon *p1 = new Polygon;
			Polygon *p2 = new Polygon;
			Polygon *p3 = new Polygon;

			p1->vert[0] = _polygons[i]->vert[0];
			p1->vert[1] = _polygons[i]->vert[1];
			p1->vert[2] = _polygons[i]->vert[2];

			p2->vert[0] = _polygons[i]->vert[0];
			p2->vert[1] = _polygons[i]->vert[2];
			p2->vert[2] = _polygons[i]->vert[3];

			p3->vert[0] = _polygons[i]->vert[0];
			p3->vert[1] = _polygons[i]->vert[3];
			p3->vert[2] = _polygons[i]->vert[4];

			newPoly.push_back(p1);
			newPoly.push_back(p2);
			newPoly.push_back(p3);
		}
		_polygons.clear();
		_polygons = newPoly;

	}
	_numPoly = _polygons.size();
	cout << " after triangulation _numPoly = "<<_numPoly;
	_polySize = 3;
}

void Mesh::loadMeshPLY(char* filename)
{
	     int endHeader=0,endVertex=0;
        int temp=0;
        float x,y,z;
        char str[300];
        FILE *file = fopen(filename,"r");
		
		
        
	while (  strncmp( "element vertex", str,strlen("element vertex")) != 0  )
			{
				fgets(str,300,file);			// format
			}
	strcpy(str, str+strlen("element vertex"));
	sscanf(str,"%i", &_numVert);
	cout<< "Number of vertices"<<_numVert<<endl;
	
	
	while (  strncmp( "element face", str,strlen("element face")) != 0  )
			{
				fgets(str,300,file);			// format
			}
	strcpy(str, str+strlen("element face"));
	sscanf(str,"%i", &_numPoly);
	cout<< "Number of faces" << _numPoly<<endl;
	
	do{
		fgets(str,300,file);
		cout << str << endl;
	}while(strncmp( "end_header", str,strlen("end_header")) != 0  );
	cout<<"Header ended";

	for(int i=0;i<_numVert;i++)
		{
			fgets(str,300,file);
			sscanf(str,"%f %f %f",&x,&y,&z);
			Vertex *v = new Vertex;
			v->x = x/_numVert;
			v->y = y/_numVert;
			v->z = z/_numVert;
			v->index = i;
			v->edge = NULL;

			_vertArray.push_back(v);
		}
		cout <<"faces";
		fgets(str,300,file);
		sscanf(str,"%d " ,&temp);
		_polySize = temp;
		int i=0;

			do{
				Polygon* p  = new Polygon;
			if(temp==3)
				sscanf(str,"%d %d %d %d",&temp,&p->vert[0],&p->vert[1],&p->vert[2]);
			if(temp==4)
				sscanf(str,"%d %d %d %d %d",&temp,&p->vert[0],&p->vert[1],&p->vert[2],&p->vert[3]);
			if(temp==5)
				sscanf(str,"%d %d %d %d %d %d",&temp,&p->vert[0],&p->vert[1],&p->vert[2],&p->vert[3],&p->vert[4]);
			printf("%d %d %d %d %d \n",temp,p->vert[0],p->vert[1],p->vert[2],p->vert[3]);
			_polygons.push_back(p);
			fgets(str,300,file);
			i++;

			}while(i<_numPoly);

	fclose(file);
	cout << "load ok";
	
}

void Mesh::render()
{
	int nvert;
	vector<Face*>::iterator iter;
	vector<Polygon*>::iterator pi;
	Vertex *vert;
	Face *face;
	Edge *edge;

	if(_polySize == 3){
			glBegin(GL_TRIANGLES);
			nvert = 3;
		}
		else
		{
			glBegin(GL_QUADS);
			nvert = 4;
		}
		cout << _faceList.size();
		for(iter = _faceList.begin(); iter != _faceList.end(); iter++)
		{
			   face = *iter;
			   if(face == NULL) continue;
			   edge = face->edge;
			   normal(edge->svert, edge->next->svert, edge->next->next->svert);
			   for(int j = 0; j < nvert; j++)
			   {
				   vert = edge->svert;
				   glVertex3f(vert->x, vert->y,  vert->z);
				   edge = edge->next;
			   }
		}
		glEnd();

}





void Mesh::normal(Vertex* p1, Vertex* p2, Vertex* p3) const
{
	float nx, ny, nz;
	nx = (p1->y)*((p2->z)-(p3->z))+(p2->y)*((p3->z)-(p1->z))+(p3->y)*((p1->z)-(p2->z));
	ny = (p1->z)*((p2->x)-(p3->x))+(p2->z)*((p3->x)-(p1->x))+(p3->z)*((p1->x)-(p2->x));
	nz = (p1->x)*((p2->y)-(p3->y))+(p2->x)*((p3->y)-(p1->y))+(p3->x)*((p1->y)-(p2->y));
	glNormal3f(nx, ny, nz);
}


void Mesh::createEdgeStruct()
{
	int ivert1,ivert2;
	if(_numVert == 0 || _numPoly == 0) return;
	_faceList.clear();
	_edgeList.clear();

	Edge *edge, *eprev, *first;
	Vertex *vrtx1 ,*vrtx2;

	for(int i = 0; i < _numPoly; i++)
	{
		Face *face = new Face;   //One face per polygon
		for(int j = 0; j < _polySize; j++)
		{
			edge = new Edge;
			ivert1 = _polygons[i]->vert[j];
			ivert2 = _polygons[i]->vert[(j+1)%_polySize];
			vrtx1 = _vertArray[ivert1];
			vrtx2 = _vertArray[ivert2];
			edge->svert = vrtx1;
			edge->evert = vrtx2;
			if(vrtx1->edge == NULL) vrtx1->edge = edge;
			edge->face = face;
			edge->twin = NULL;
			if(j > 0)
			{
				edge->prev = eprev;
				eprev->next = edge;
			}
			else first = edge;
			eprev = edge;
			_edgeList.push_back(edge);
		}
		first->prev = edge;
		edge->next = first;
		face->edge = edge;
        face->index = i;
		_faceList.push_back(face);
	}

	createEdgePairs();
	glEnable(GL_NORMALIZE);
}

void Mesh::createEdgePairs()
{
	vector<Edge*>::iterator iter1, iter2;
	Edge *edge, *e_twin;

	for(iter1 = _edgeList.begin(); iter1 != _edgeList.end(); iter1++)
	{
		edge = *iter1;
		if(edge->twin == NULL)
		{
			for(iter2 = iter1; iter2 != _edgeList.end(); iter2++)     //search for pair
			{
				e_twin = *iter2;
				if(edge->svert->index == e_twin->evert->index && edge->evert->index == e_twin->svert->index){
					edge->twin = e_twin;
					e_twin->twin = edge;
					break;
				} //if
			} //for iter2
		} //if
	}//for iter1
}

vector<int> Mesh::oneRingNbs(int vIndx)
{
	vector<int> ngh_indices;
    Vertex* p = _vertArray[vIndx];
    Edge *e0 = p->edge;
	Edge *edge = e0;
	Edge *e_twin;
	do
	{
		e_twin = edge->twin;
		ngh_indices.push_back(e_twin->svert->index);
		edge = e_twin->prev;
	}while (edge != e0);
	return ngh_indices;
}

int Mesh::search(int i1, int i2)
{
    int size = vertInd1.size();
    if(size == 0) return -1;
    for(int i = 0;  i < size; i++)
    {
        if(vertInd1[i] == i2  && vertInd2[i] == i1) return vertNewIndx[i];
    }
    return -1;
}
void Mesh::subdivide()
{
    int nsize;
    int numVert;
    vector<Vertex*> vertNewArray;  //Temporary array holding transformed and new vertices
    vector<Polygon*> faceNewArray;
    vector<Polygon*> faceOldArray;

	Vertex *vert1, *vert2, *vert3, *vert4, *vertNew;
	Edge *edge;
	vector<int> neighbs;
    numVert = _vertArray.size();
    float wt1 = 0.625, wt2;
	float sumx, sumy, sumz;
	//Update existing vertices  --- Eq. (8.20) ----
    for(int i = 0;  i < numVert; i++)
    {
        neighbs = oneRingNbs(i);
        nsize = neighbs.size();
        if(nsize == 3)       wt2 = 0.125;  //*3 = 0.375
        else if(nsize == 6)  wt2 = 0.0625; //*6 = 0.375
		vert1 = _vertArray[i];
		sumx = 0.625*(vert1->x);
		sumy = 0.625*(vert1->y);
		sumz = 0.625*(vert1->z);
		for(int k = 0;  k < nsize; k++)
		{
			vert2 = _vertArray[neighbs[k]];
			sumx += wt2*(vert2->x);
			sumy += wt2*(vert2->y);
			sumz += wt2*(vert2->z);
		}
		vertNew = new Vertex;
		vertNew->x = sumx;  vertNew->y = sumy;  vertNew->z = sumz;
		vertNew->index = i;  vertNew->edge = vert1->edge;
		vertNewArray.push_back(vertNew);
        neighbs.clear();
    }

	int vsize = numVert;
	vertInd1.clear();
	vertInd2.clear();
	vertNewIndx.clear();
	Face *face;
    Polygon *fnew, *fold;
    vector<Face*>::iterator f_iter;
	int vindx;  //edge vertex indices
    //Create new vertices
	for(f_iter = _faceList.begin(); f_iter != _faceList.end(); f_iter++)
	{
		face = *f_iter;
		edge = face->edge;
        fnew = new Polygon;
		fold = new Polygon;
		for(int k = 0;  k < 3;  k++)   //Assumption: Triangular mesh
		{
			vert1 = edge->svert;
			fold->vert[k] = vert1->index;
			vert2 = edge->twin->svert;
            vindx = search(vert1->index,vert2->index);
			if( vindx < 0)  //create a new vertex
			{
				vertInd1.push_back(vert1->index);
				vertInd2.push_back(vert2->index);
                vertNewIndx.push_back(vsize);
				vertNew = new Vertex;
				vert3 = edge->next->svert;
				vert4 = edge->twin->next->svert;
                //--Eq. (8.19)--
				vertNew->x = 0.375*((vert1->x)+(vert2->x)) + 0.125*((vert3->x)+(vert4->x));
				vertNew->y = 0.375*((vert1->y)+(vert2->y)) + 0.125*((vert3->y)+(vert4->y));
				vertNew->z = 0.375*((vert1->z)+(vert2->z)) + 0.125*((vert3->z)+(vert4->z));
				vertNew->index = vsize;
                fnew->vert[k] = vsize;
				vertNew->edge = edge;
				vertNewArray.push_back(vertNew);
				vsize++;
			}
            else   fnew->vert[k] = vindx;   //new vertex already created
			edge = edge->next;
		}
        faceNewArray.push_back(fnew);
		faceOldArray.push_back(fold);
	}

    //Restructure and retriangulate each face
	Edge *e[3], *enew1, *enew2, *enew3;
	Face *f[3];
	Vertex *vn[3], *vo[3];
	int k1, k2;

	int fsize = _faceList.size();
	f_iter = _faceList.begin();
	for(int findx = 0;  findx < fsize; findx++)
	{
		f[0] = *f_iter;    //current face
		f[1] = new Face; //Create 2 more sub-faces
		f[2] = new Face;
		e[0] = f[0]->edge;
		e[1] = e[0]->next;
		e[2] = e[1]->next;
        fnew = faceNewArray[findx];
		fold = faceOldArray[findx];
		for(int k = 0;  k < 3;  k++)
		{
            vindx = fnew->vert[k];
            vn[k] = vertNewArray[vindx];
			vindx = fold->vert[k];
			vo[k] = vertNewArray[vindx];
		}
		for(int k = 0;  k < 3;  k++)
		{
			enew1 = new Edge;  //Create 2 new edges for each sub-face
			enew2 = new Edge;
            e[k]->svert = vn[k]; e[k]->face = f[k];
			e[k]->next = enew1; e[k]->prev = enew2;
			k1 = (k+2)%3;
			enew1->svert = vn[k1]; enew1->prev = e[k]; enew1->next = enew2; enew1->face = f[k];
			enew2->svert = vo[k1]; enew2->prev = enew1; enew2->next = e[k]; enew2->face = f[k];
			f[k]->edge = e[k];
			vo[k1]->edge = enew2;
			_edgeList.push_back(enew1);
			_edgeList.push_back(enew2);
		}
		_faceList.push_back(f[1]);
		_faceList.push_back(f[2]);
		//Create middle face
		face = new Face;
		enew1 = new Edge;  //Create 3 new edges for each sub-face
		enew2 = new Edge;
		enew3 = new Edge;
		enew1->svert = vn[0]; enew1->prev = enew3; enew1->next = enew2; enew1->face = face;
		enew2->svert = vn[1]; enew2->prev = enew1; enew2->next = enew3; enew2->face = face;
		enew3->svert = vn[2]; enew3->prev = enew2; enew3->next = enew1; enew3->face = face;
		mesh->_edgeList.push_back(enew1);
		mesh->_edgeList.push_back(enew2);
		mesh->_edgeList.push_back(enew3);
		face->edge = enew1;
		mesh->_faceList.push_back(face);
		f_iter++;
	}
	mesh->_vertArray.clear();
	for(int i = 0;  i < vsize; i++) mesh->_vertArray.push_back(vertNewArray[i]);

	list<Edge*>::iterator e_iter;
	for(e_iter = mesh->_edgeList.begin(); e_iter != mesh->_edgeList.end(); e_iter++) (*e_iter)->twin = NULL;

    mesh->_numVert = vsize;
	vertNewArray.clear();
	faceNewArray.clear();
	faceOldArray.clear();
	mesh->createEdgePairs();
}
