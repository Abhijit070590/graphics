#include <iostream>
#include <fstream>
#include "../Headers/Mesh.h"
#include <GL/glut.h>
#include <GL/glui.h>
using namespace std;

Mesh *mesh,*cmesh;
int numVert;
int meshControl = 0 ;
int level = 0;  //subdivision level



float view_rotate[16]={1,0,0,0, 0,1,0,0 ,0,0,1,0 ,0,0,0,1};
GLUI_Checkbox   *checkbox;

GLUI_RadioGroup *radio;

GLUI_Rotation   *rotate;
float view_rotate[16] = {1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1};

//-- A temperorary structure ---


//---- Function to subdivide the mesh ---------------------------------------------
//---- Call this function for each iteration --------------------------------------

//---Reads data file and initializes drawing parameters ------------------
void initialise(char *filename,char *cfilename)
{
	mesh = new Mesh();
	mesh->loadMeshPLY(filename);
	mesh->createEdgeStruct();
	cmesh = new Mesh();
	cmesh->loadMeshPLY(cfilename);
	glEnable(GL_LIGHT0);
	glEnable(GL_DEPTH_TEST);

	glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-2., 2., -2., 2., -2., 2.);
}

//---- Display:  The main display module ----------------------------------
void myGlutDisplay()
{
	glClearColor( 1.0f, 1.0f, 1.0f, 1.0f );
	  glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );

	  glMatrixMode( GL_PROJECTION );
	  glLoadIdentity();
	  glFrustum( -xy_aspect*.08, xy_aspect*.08, -.08, .08, .1, 15.0 );

	  glMatrixMode( GL_MODELVIEW );
	  glLoadIdentity();
	  //glPushMatrix();
	  glTranslatef( 0.0f, 0.0f, -1.6f );
	  glMultMatrixf(view_rotate);
	if(meshControl == 1)
	mesh->render();
	if(meshControl == 0)
		cmesh->render();
	glFlush();
}

//-- Callback function for processing keyboard events --------------------
void myGlutKeyboard(unsigned char Key, int x, int y)
{

  glutPostRedisplay();
}


//-- Callback function for processing special keyboard events --------------
void myGlutIdle( void )
{
  /* According to the GLUT specification, the current window is
     undefined during an idle callback.  So we need to explicitly change
     it if necessary */
  if ( glutGetWindow() != main_window )
    glutSetWindow(main_window);

  glutPostRedisplay();
}
void control_cb( int control )
{
  /********************************************************************
    Here we'll print the user id of the control that generated the
    callback, and we'll also explicitly get the values of each control.
    Note that we really didn't have to explicitly get the values, since
    they are already all contained within the live variables:
    'wireframe',  'segments',  'obj',  and 'text'
    ********************************************************************/

  printf( "callback: %d\n", control );
  printf( "             checkbox: %d\n", checkbox->get_int_val() );
  printf( "              spinner: %d\n", spinner->get_int_val() );
  printf( "          radio group: %d\n", radio->get_int_val() );
  //printf( "                 text: %s\n", edittext->get_text() );

}


//------- Main: Initialize glut window and register call backs -------------
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	  glutInitDisplayMode( GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH );
	  glutInitWindowPosition( 50, 50 );
	  glutInitWindowSize( 300, 300 );

	  main_window = glutCreateWindow( "GLUI Example 2" );
	  glutDisplayFunc( myGlutDisplay );
	  glutReshapeFunc( myGlutReshape );
	  glutKeyboardFunc( myGlutKeyboard );
	  glutMotionFunc( myGlutMotion );
	  glutMouseFunc( myGlutMouse );
   initialise (argv[1],argv[1]);
   GLfloat light0_ambient[] =  {0.1f, 0.1f, 0.3f, 1.0f};
     GLfloat light0_diffuse[] =  {.6f, .6f, 1.0f, 1.0f};
     GLfloat light0_position[] = {1.0f, 1.0f, 1.0f, 0.0f};

     glEnable(GL_LIGHTING);
     glEnable(GL_LIGHT0);
     glLightfv(GL_LIGHT0, GL_AMBIENT, light0_ambient);
     glLightfv(GL_LIGHT0, GL_DIFFUSE, light0_diffuse);
     glLightfv(GL_LIGHT0, GL_POSITION, light0_position);

     glEnable(GL_DEPTH_TEST);
     GLUI *glui = GLUI_Master.create_glui( "GLUI", 0, 400, 50 ); /* name, flags,
                      x, and y */
       new GLUI_StaticText( glui, "GLUI Example 2" );
       new GLUI_Separator( glui );
       checkbox = new GLUI_Checkbox( glui, "Control", &meshControl, 1, control_cb );

       rotate = new GLUI_Rotation(glui, "view_rotate",view_rotate);
       rotate -> set_spin(1.0);
       //edittext = new GLUI_EditText( glui, "Text:", text, 3, control_cb );
       GLUI_Panel *obj_panel = new GLUI_Panel( glui, "Object Type" );
       radio = new GLUI_RadioGroup( obj_panel,&obj,4,control_cb );
       new GLUI_RadioButton( radio, "Sphere" );
       new GLUI_RadioButton( radio, "Torus" );
       new GLUI_RadioButton( radio, "Teapot" );
       new GLUI_Button( glui, "Quit", 0,(GLUI_Update_CB)exit );

       glui->set_main_gfx_window( main_window );

       /* We register the idle callback with GLUI, *not* with GLUT */
       GLUI_Master.set_glutIdleFunc( myGlutIdle );
       GLUI_Master.set_glutIdleFunc( NULL );

       glutMainLoop();
   return 0;
}
