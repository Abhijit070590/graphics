#ifndef MESH_H
#define MESH_H
#include <vector>
#include <list>
using namespace std;
static struct Vertex;
static struct Face;
static struct Edge
{

  	Vertex* vert;
	Face* face;
  	Edge* next;
  	Edge* prev;
  	Edge* pair;
};

static struct Vertex
{

	float x;
	float y;
	float z;
	int index;
	Edge* edge;
};

static struct Face
{

  Edge* edge;
  int index;
};

static struct Polygon
{
	int vert[6];
};

class Mesh
{
private:

	int _polySize;
	int _numVert, _numPoly;
	vector<Polygon*> _polygons;
    vector<Vertex*> _vertArray;
    list<Face*> _faceList;
    list<Edge*> _edgeList;
    vector<int> vertInd1;
    vector<int> vertInd2;
    vector<int> vertNewIndx;
public:
	Mesh()
		:_polySize(0), _numVert(0), _numPoly(0)
	      {}
	~Mesh() {}
	void loadMeshPLY(char* filename);
	void triangulate();
	void render();
	void renderBV(float& xmin, float& xmax,float& ymin, float& ymax, float& zmin, float& zmax);
	void setColorAmbientDiffuse(float colorR, float colorG, float colorB) const;
	void setColorSpecular(float colorR, float colorG, float colorB, float shininess) const;
    void boundingVolume(float& xmin, float& xmax,float& ymin, float& ymax, float& zmin, float& zmax);
	void normal(Vertex* p1, Vertex* p2, Vertex* p3) const;
	void createEdgeStruct();
	void createEdgePairs();
	vector<int> oneRingNbs(int vIndx) const;
	void subdivide();
	int search(int i1, int i2);
};

#endif
